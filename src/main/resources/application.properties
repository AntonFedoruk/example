spring.jpa.hibernate.ddl-auto=update
# Here, spring.jpa.hibernate.ddl-auto can be none, update, create, or create-drop. See the Hibernate documentation for details.
    # none: The default for MySQL. No change is made to the database structure.
    # update: Hibernate changes the database according to the given entity structures.
    # create: Creates the database every time but does not drop it on close.
    # create-drop: Creates the database and drops it when SessionFactory closes.
# You must begin with either create or update, because you do not yet have the database structure.
# After the first run, you can switch it to update or none, according to program requirements.
# Use update when you want to make some change to the database structure.

#It is a good security practice to, after your database is in a production state, set this to none,
# revoke all privileges from the MySQL user connected to the Spring application, and give the MySQL
# user only SELECT, UPDATE, INSERT, and DELETE.
spring.datasource.url=jdbc:mysql://${MYSQL_HOST:localhost}:3306/db_example
spring.datasource.username=user
spring.datasource.password=password
spring.jpa.generate-ddl=true

#SpringMvc in controller gona send additional param and these params will be given to the template
spring.mustache.expose-request-attributes=true